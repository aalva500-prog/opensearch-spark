name: End-to-End Tests

on:
  pull_request:
  push:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        entry:
          - { os: ubuntu-latest, java: 11 }
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Set up SBT
        uses: sbt/setup-sbt@v1

      - name: Set SBT_OPTS
        # Needed to extend the JVM memory size to avoid OutOfMemoryError for HTML test report
        run: echo "SBT_OPTS=-Xmx2G" >> $GITHUB_ENV

      - name: Set environment variables
        # Set environment variables for GitHub Actions environment
        # Tests run on the GitHub runner and access Docker containers via port mapping
        run: |
          echo "S3_ENDPOINT=localhost" >> $GITHUB_ENV
          echo "S3_PORT=9000" >> $GITHUB_ENV
          echo "S3_REGION=us-east-1" >> $GITHUB_ENV
          # Use localhost for Spark host since tests run on the GitHub runner
          echo "SPARK_HOST=localhost" >> $GITHUB_ENV

      - name: Build project
        run: sbt assembly

      - name: Start Docker containers
        run: |
          cd docker/integ-test
          # Increase memory limits for OpenSearch
          echo "Updating docker-compose.yml to increase memory limits"
          sed -i 's/OPENSEARCH_JAVA_OPTS=-Xms${OPENSEARCH_NODE_MEMORY:-512m} -Xmx${OPENSEARCH_NODE_MEMORY:-512m}/OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g/' docker-compose.yml
          
          # Start containers
          docker compose up -d
          echo "Waiting for services to start (initial 30s)..."
          sleep 30
          
          # Check container status
          echo "Initial container status:"
          docker ps -a
          
          # Check OpenSearch logs
          echo "OpenSearch logs:"
          docker logs opensearch || true
          
          # Wait longer for services to stabilize
          echo "Waiting additional time for services to stabilize..."
          sleep 90
          
          # Final container status
          echo "Final container status:"
          docker ps -a

      - name: Check Docker container health
        run: |
          echo "Checking container health..."
          
          echo "MinIO health check:"
          docker exec minio-S3 curl -s http://localhost:9000/minio/health/live || echo "MinIO health check failed"
          
          echo "Spark master UI check:"
          docker exec spark curl -s http://localhost:8080/ || echo "Spark master UI not available"
          
          echo "OpenSearch health check:"
          docker exec opensearch curl -s -u admin:C0rrecthorsebatterystaple. http://localhost:9200/_cluster/health || echo "OpenSearch health check failed"
          
          echo "OpenSearch cluster status:"
          docker exec opensearch curl -s -u admin:C0rrecthorsebatterystaple. http://localhost:9200/_cat/health || echo "OpenSearch status check failed"
          
          echo "OpenSearch JVM info:"
          docker exec opensearch curl -s -u admin:C0rrecthorsebatterystaple. http://localhost:9200/_nodes/stats/jvm || echo "OpenSearch JVM info check failed"

      - name: End-to-End Test
        run: |
          # Print environment for debugging
          echo "Current directory: $(pwd)"
          echo "Docker containers:"
          docker ps -a
          # Run the tests
          sbt e2etest/test

      - name: Capture Docker logs (on failure)
        if: failure()
        run: |
          echo "Capturing Docker logs..."
          docker ps -a
          
          echo "OpenSearch logs:"
          docker logs opensearch > opensearch.log 2>&1 || true
          
          echo "OpenSearch Dashboards logs:"
          docker logs opensearch-dashboards > opensearch-dashboards.log 2>&1 || true
          
          echo "Spark logs:"
          docker logs spark > spark.log 2>&1 || true
          
          echo "Spark Worker logs:"
          docker logs spark-worker > spark-worker.log 2>&1 || true
          
          echo "MinIO logs:"
          docker logs minio-S3 > minio.log 2>&1 || true
          
          echo "Metastore logs:"
          docker logs metastore > metastore.log 2>&1 || true
          
          echo "Configuration Updater logs:"
          docker logs configuration-updater > configuration-updater.log 2>&1 || true
          
          # Check system resources
          echo "System memory info:"
          free -h
          
          echo "System disk info:"
          df -h

      - name: Upload Docker logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: "*.log"
          if-no-files-found: warn

      - name: Upload test report
        if: always() # Ensures the artifact is saved even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/test-reports # Adjust this path if necessary